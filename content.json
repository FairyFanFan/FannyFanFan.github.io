{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"常用SASS","slug":"常用SASS","date":"2018-07-16T08:04:52.000Z","updated":"2018-07-16T08:35:08.073Z","comments":true,"path":"2018/07/16/常用SASS/","link":"","permalink":"http://yoursite.com/2018/07/16/常用SASS/","excerpt":"","text":"不支持&amp;&amp; 但是and可用 父选择器 123456789101112a &#123; font-weight: bold; &amp;:hover &#123; text-decoration: underline; &#125; body.firefox &amp; &#123; font-weight: normal; &#125;&#125;// 编译为a &#123; font-weight: bold; &#125; a:hover &#123; text-decoration: underline; &#125; body.firefox a &#123; font-weight: normal; &#125; 属性嵌套 1234567891011.funky &#123; font: 20px/24px &#123; family: fantasy; weight: bold; &#125;&#125;// 编译为.funky &#123; font: 20px/24px; font-family: fantasy; font-weight: bold; &#125; 注释 / / 与 // (前者会被完整输出到编译后的 CSS 文件中而后者不会) 变量 1234567891011121314151617#main &#123; $width: 5em !global; width: $width;&#125;#sidebar &#123; width: $width;&#125;编译为#main &#123; width: 5em;&#125;#sidebar &#123; width: 5em;&#125; sassScript字符串 12345678910@mixin firefox-message($selector) &#123; body.firefox #&#123;$selector&#125;:before &#123; content: \"Hi, Firefox users!\"; &#125;&#125;@include firefox-message(\".header\");编译为body.firefox .header:before &#123; content: \"Hi, Firefox users!\"; &#125; sassScript运算符 1234567891011121314p &#123; font: 10px/8px; // Plain CSS, no division $width: 1000px; width: $width/2; // Uses a variable, does division width: round(1.5)/2; // Uses a function, does division height: (500px/2); // Uses parentheses, does division margin-left: 5px + 8px/2px; // Uses +, does division&#125;编译为p &#123; font: 10px/8px; width: 500px; height: 250px; margin-left: 9px; &#125; 插值语句 #{} 12345678$name: foo;$attr: border;p.#&#123;$name&#125; &#123; #&#123;$attr&#125;-color: blue;&#125;编译为p.foo &#123; border-color: blue; &#125; 嵌套 @import 1234567891011.example &#123; color: red;&#125;然后导入到 #main 样式内#main &#123; @import \"example\";&#125;将会被编译为#main .example &#123; color: red;&#125; @extend 1234567891011121314151617181920&lt;div class=\"error seriousError\"&gt; Oh no! You've been hacked!&lt;/div&gt;样式如下.error &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; border-width: 3px;&#125;/* 麻烦的是，这样做必须时刻记住使用 .seriousError 时需要参考 .error 的样式，带来了很多不变：智能比如加重维护负担，导致 bug，或者给 HTML 添加无语意的样式。使用 @extend 可以避免上述情况，告诉 Sass 将一个选择器下的所有样式继承给另一个选择器。 */.error &#123; border: 1px #f00; background-color: #fdd;&#125;.seriousError &#123; @extend .error; border-width: 3px;&#125; @if 12345678910111213141516$type: monster;p &#123; @if $type == ocean &#123; color: blue; &#125; @else if $type == matador &#123; color: red; &#125; @else if $type == monster &#123; color: green; &#125; @else &#123; color: black; &#125;&#125;编译为p &#123; color: green; &#125; @for 1234567891011@for $i from 1 through 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125;编译为.item-1 &#123; width: 2em; &#125;.item-2 &#123; width: 4em; &#125;.item-3 &#123; width: 6em; &#125; @each 123456789101112131415@each $animal in puma, sea-slug, egret, salamander &#123; .#&#123;$animal&#125;-icon &#123; background-image: url('/images/#&#123;$animal&#125;.png'); &#125;&#125;编译为.puma-icon &#123; background-image: url('/images/puma.png'); &#125;.sea-slug-icon &#123; background-image: url('/images/sea-slug.png'); &#125;.egret-icon &#123; background-image: url('/images/egret.png'); &#125;.salamander-icon &#123; background-image: url('/images/salamander.png'); &#125; @while 12345678910111213 $i: 6;@while $i &gt; 0 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125; $i: $i - 2;&#125;.item-6 &#123; width: 12em; &#125;.item-4 &#123; width: 8em; &#125;.item-2 &#123; width: 4em; &#125; @mixin @include 12345678910111213141516171819202122 @mixin large-text &#123; font: &#123; family: Arial; size: 20px; weight: bold; &#125; color: #ff0000;&#125;.page-title &#123; @include large-text; padding: 4px; margin-top: 10px;&#125;编译为.page-title &#123; font-family: Arial; font-size: 20px; font-weight: bold; color: #ff0000; padding: 4px; margin-top: 10px; &#125; 参数 123456789101112131415161718192021222324252627282930@mixin sexy-border($color, $width) &#123; border: &#123; color: $color; width: $width; style: dashed; &#125;&#125;p &#123; @include sexy-border(blue, 1in); &#125;编译为p &#123; border-color: blue; border-width: 1in; border-style: dashed; &#125;@mixin colors($text, $background, $border) &#123; color: $text; background-color: $background; border-color: $border;&#125;$values: #ff0000, #00ff00, #0000ff;.primary &#123; @include colors($values...);&#125;编译为.primary &#123; color: #ff0000; background-color: #00ff00; border-color: #0000ff;&#125;","categories":[],"tags":[]},{"title":"过滤console.log","slug":"console-log","date":"2018-07-16T08:03:36.000Z","updated":"2018-07-16T08:04:14.963Z","comments":true,"path":"2018/07/16/console-log/","link":"","permalink":"http://yoursite.com/2018/07/16/console-log/","excerpt":"","text":"webpack.prod.conf.js文件 new webpack.optimize.UglifyJsPlugin({ compress: { warnings: false, drop_console: true, //这里！ }, sourceMap: true }),","categories":[],"tags":[]},{"title":"flex","slug":"flex","date":"2018-07-16T07:58:21.000Z","updated":"2018-07-16T08:00:52.962Z","comments":true,"path":"2018/07/16/flex/","link":"","permalink":"http://yoursite.com/2018/07/16/flex/","excerpt":"","text":"Flex弹性布局 (任何元素都能使用弹性布局,行元素设置的是（display :inline-flex）) 第一，让元素横排。 第二，默认横排。 第三，加了flex之后称之为容器，里面子元素叫项目 注意：弹性布局，子元素身上的float 和margin不管用 display: flex; display: -webkit-flex; / 换行(默认不换行) / flex-wrap: wrap; / 对齐方式就是换排列方式 / / 主轴对齐方式(X轴对齐方式) / justify-content: flex-start; / 左对齐 / justify-content: flex-end; / 右对齐 / justify-content: center; / 居中 / justify-content: space-between; / 两端对齐 / justify-content: space-around; / 等间距对齐 / / （Y轴）多轴交叉对齐方式 / / 多于两行的就是多轴 /——对于单轴布局不起任何作用 align-content: center; / 居中对齐 / align-content: flex-start; / 上对齐 / align-content: flex-end; / 下对齐 / align-content: space-between; / 两端对齐 / align-content: space-around; / 等间距对齐 / / align-content: stretch; / 对齐的时候取决于最高的那个元素 / (Y轴)单轴交叉对齐方式 /——对多轴交叉起作用，但效果不是我们想要的。 / align-items: flex-start; / / align-items: flex-end; / / align-items: center; / / align-items: stretch; 高度不设置或为auto时，默认占满整个父元素 / Baseline第一行文字的底线 / 主轴方向 / 类似浮动的功能 flex-direction: row; / 从左到右 / flex-direction: row-reverse; / 从右到左 / flex-direction: column; / 从上到下 / flex-direction: column-reverse; / 从下到上 / order：1.默认为0； 2.项目按照order的值进行分组排列（可以调节子元素的位置） 3.可以为负值 align-self： 调节单个子元素在其所在这一排的位置。（默认值auto） align-self：center /flex-start/ flex-end / stretch 元素被拉伸以适应容器。 flex-shrink：1.默认是1；2.当剩余空间不足时才会缩小。 flex-grow：1.默认是0；2.不存在空间冲不充足这一说，给其他兄弟元素身上也设好flex-grow值就可操。 flex-basis：让当前项目按照自己原来的尺寸出现，默认值是auto，或给定具体的值让项目执行。不是所有地方都起作用。 想让子元素垂直居中： display:flex; align-items:center; justify-content:center;","categories":[],"tags":[]},{"title":"2018-06-旧博客归档整理","slug":"2018-06-旧博客归档整理","date":"2018-07-16T07:20:11.000Z","updated":"2018-07-16T07:56:57.262Z","comments":true,"path":"2018/07/16/2018-06-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2018-06-旧博客归档整理/","excerpt":"","text":"拓展运算符const a = [1,2,3]; console.log(...a); //1 2 3 function add(x,y,z){return x+y+z;};console.log(add(...a)); // 6 const brr = [0,0] ; brr.push(...a);console.log(brr); // [0, 0, 1, 2, 3] const [first, ...rest] = [1, 2, 3, 4, 5]; first // 1 rest // [2, 3, 4, 5] // 如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错 const [...butLast, last] = [1, 2, 3, 4, 5];// 报错 const [first, ...middle, last] = [1, 2, 3, 4, 5];// 报错 // 字符串转为真正的数组 console.log( [...&apos;hello&apos;]) // [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ] // 结点操作 console.log(document.querySelectorAll(&apos;div&apos;)) // NodeList(2) [div#sidebar, div#content] console.log([...document.querySelectorAll(&apos;div&apos;)]) // (2) [div#sidebar, div#content] ref v-if在这个过程中还发现了一个问题，ref 和v-if问题，找不到$ref，渲染先后问题?解决：ref 需要在dom渲染完成后才会有,在使用的时候确保dom已经渲染完成. 比如在 生命周期 mounted(){} 钩子中调用 或者在 this.$nextTick(()=&gt;{}) 中调用","categories":[],"tags":[]},{"title":"2018-04-旧博客归档整理","slug":"2018-04-旧博客归档整理","date":"2018-07-16T07:19:40.000Z","updated":"2018-07-16T07:46:38.965Z","comments":true,"path":"2018/07/16/2018-04-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2018-04-旧博客归档整理/","excerpt":"","text":"css生成器https://blog.csdn.net/qq_15096707/article/details/52269758 button : https://www.bestcssbuttongenerator.com/ 智图：http://zhitu.isux.us/","categories":[],"tags":[]},{"title":"2018-03-旧博客归档整理","slug":"2018-03-旧博客归档整理","date":"2018-07-16T07:19:32.000Z","updated":"2018-07-16T07:45:44.308Z","comments":true,"path":"2018/07/16/2018-03-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2018-03-旧博客归档整理/","excerpt":"","text":"CY项目 基础错误！headers[‘x-auth-token’] mint-ui组件TabItem中的a链接没有给对外接口，要想实现路由跳转，就对TabItem进行二次修改，实现跳转&lt;template&gt; &lt;a class=&quot;mint-tab-item&quot; @click=&quot;$parent.$emit(&apos;input&apos;, id)&quot; :class=&quot;{ &apos;is-selected&apos;: $parent.value === id }&quot;&gt; &lt;router-link :to=&quot;route&quot;&gt; &lt;div class=&quot;mint-tab-item-icon&quot;&gt;&lt;slot name=&quot;icon&quot;&gt;&lt;/slot&gt;&lt;/div&gt; &lt;div class=&quot;mint-tab-item-label&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt; &lt;/router-link&gt; &lt;/a&gt; &lt;/template&gt; &lt;script&gt; import { TabItem } from &apos;mint-ui&apos;; export default { name: &apos;mt-tab-item2&apos;, extends:TabItem, props: [&apos;id&apos;,&apos;route&apos;] }; &lt;/script&gt; 引入并且注册import TabItem2 from &apos;./common/tabItem&apos;; export default { components: { TabItem2 } } 直接用引入的TabItem2，搞定！&lt;mt-tabbar fixed v-model=&quot;tab_selected&quot;&gt; &lt;TabItem2 id=&quot;游戏厅&quot; route=&quot;/gameCenter&quot;&gt; &lt;img slot=&quot;icon&quot; src=&quot;./assets/logo.png&quot;&gt; 游戏厅 &lt;/TabItem2&gt; &lt;TabItem2 id=&quot;奖品城&quot; route=&quot;/prizeCity&quot;&gt; &lt;img slot=&quot;icon&quot; src=&quot;./assets/logo.png&quot;&gt; 奖品城 &lt;/TabItem2&gt; &lt;TabItem2 id=&quot;我的&quot; route=&quot;/mine&quot;&gt; &lt;img slot=&quot;icon&quot; src=&quot;./assets/logo.png&quot;&gt; 我的 &lt;/TabItem2&gt; 登录加密 sha1 这个有npm的包https://www.npmjs.com/package/sha1 关于dependencies 和 devdependencies axios get请求 content-Type 属性无效 bug 解决var data=&apos;&apos; axios.get(&apos;/api/sms/validationCode/17710000002&apos;, { data: data|| {} }) .then(function(response) { console.log(response); }) .catch(function(error) { console.log(error); }); webpack图片链接打包bugv-bind:src= imgUrl //绑定 imgUrl: require(&quot;./assets/img/youxiting.png&quot;), vue属性顺序export default { // 组件 components: {}, // props props:[], // 数据 data(){}, // 计算属性 computed:{}, // 侦听器 watch:{}, // 生命周期 created(){}, // 方法 methods:{ // 外部引入的方法先声明 } } vue fontawesomehttps://blog.csdn.net/qq_27868533/article/details/79638725","categories":[],"tags":[]},{"title":"2018-02-旧博客归档整理","slug":"2018-02-旧博客归档整理","date":"2018-07-16T07:19:22.000Z","updated":"2018-07-16T07:39:21.956Z","comments":true,"path":"2018/07/16/2018-02-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2018-02-旧博客归档整理/","excerpt":"","text":"微信小程序 点击事件：wx.showToast({OBJECT}) 接入高德地图https://baijiahao.baidu.com/s?id=1564116914173709&amp;wfr=spider&amp;for=pc ui——http://blog.csdn.net/qq_19558705/article/details/60576157 提示弹框：http://www.weikeba.cn/article-1003-1.html 微信小程序demo: https://www.cnblogs.com/growingpains/p/7379693.html 生命周期：http://blog.csdn.net/u014360817/article/details/52650973 swipe-item和内部的block都循环，会出现问题。 input 问题解决：https://segmentfault.com/q/1010000008814452","categories":[],"tags":[]},{"title":"2017-12-旧博客归档整理","slug":"2017-12-旧博客归档整理","date":"2018-07-16T07:18:21.000Z","updated":"2018-07-16T07:37:46.561Z","comments":true,"path":"2018/07/16/2017-12-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2017-12-旧博客归档整理/","excerpt":"","text":"安卓机软键盘遮挡的问题var winHeight = $(window).height(); //获取当前页面高度 $(window).resize(function(){ varthisHeight=$(this).height(); if(winHeight-thisHeight&gt;50){ //当软键盘弹出，在这里面操作 $(&apos;body&apos;).css(&apos;height&apos;,winHeight+&apos;px&apos;); }else{ //当软键盘收起，在此处操作 $(&apos;body&apos;).css(&apos;height&apos;,&apos;100%&apos;); } });","categories":[],"tags":[]},{"title":"2018-01-旧博客归档整理","slug":"2018-01-旧博客归档整理","date":"2018-07-16T07:18:05.000Z","updated":"2018-07-17T00:58:39.655Z","comments":true,"path":"2018/07/16/2018-01-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2018-01-旧博客归档整理/","excerpt":"","text":"总结vue-cli会员中心遇到的小问题跨域代理设置// config中的index.js dev: { // host: &apos;localhost&apos;, // can be overwritten by process.env.HOST // 在手机上看 // host:&apos;192.168.2.160&apos;, env: require(&apos;./dev.env&apos;),//代理 port: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined autoOpenBrowser: true, // Paths assetsSubDirectory: &apos;static&apos;, assetsPublicPath: &apos;/&apos;, proxyTable: { &apos;/api&apos;:{ target:&quot;http://bd.inofu.com&quot;,//设置你调用的接口域名和端口号 别忘了加http changeOrigin:true,//是否需要跨域 pathRewrite:{ &apos;^/api&apos;:&apos;&apos;//这里理解成用‘/api&apos;代替target里面的地址，后面组件中我们掉接口时直接用api代替 // // 比如我要调用&apos;http://40.00.100.133:3002/user/login&apos;，直接写‘/api/user/login&apos;即可 } } }, 安卓可以显示日历但是ios显示不出来时间问题，ios时间格式改写成2017-03-08//加具体时间就是2017-03-08T00:00:00 缓存keep-alive当引入keep-alive的时候，页面第一次进入，钩子的触发顺序created-&gt; mounted-&gt; activated，退出时触发deactivated。当再次进入（前进或者后退）时，只触发activated。 手机动态码//html &lt;div class=&quot;input-div&quot; v-show=&quot;formData.phone&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;input code&quot; name=&quot;code&quot; v-model.trim=&quot;formData.code&quot; placeholder=&quot;验证码&quot;&gt; &lt;button @click=&quot;getCode(formData)&quot; class=&quot;code-btn&quot; :disabled=&quot;!show&quot;&gt; &lt;span v-show=&quot;show&quot;&gt;获取验证码&lt;/span&gt; &lt;span v-show=&quot;!show&quot; class=&quot;count&quot;&gt;{{count}} s&lt;/span&gt; &lt;/button&gt; &lt;/div&gt; // js &lt;script&gt; const TIME_COUNT = 60; data(){ return { formData: { phone:&apos;&apos;, code:&apos;&apos;, }, show: true, count: &apos;&apos;, timer: null, } }, methods:{ getCode(formData){ if (!this.timer) { this.count = TIME_COUNT; this.show = false; this.timer = setInterval(() =&gt; { if (this.count &gt; 0 &amp;&amp; this.count &lt;= TIME_COUNT) { this.count--; } else { this.show = true; clearInterval(this.timer); this.timer = null; } }, 1000) } } } &lt;/script&gt; z500 win10 集成显卡 亮度调节在注册表里面搜索featuretestcontrol，将f000修改为ffff，然后重启 就可以调节亮度了","categories":[],"tags":[]},{"title":"2017-11-旧博客归档整理","slug":"2017-11-旧博客归档整理","date":"2018-07-16T07:06:31.834Z","updated":"2018-07-16T07:13:26.276Z","comments":true,"path":"2018/07/16/2017-11-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2017-11-旧博客归档整理/","excerpt":"","text":"优化H5页面 图片png&gt;jpg智图处理图片精灵 js请求 css文字超出隐藏变省略号overflow:hidden; //超出的文本隐藏 text-overflow:ellipsis; //溢出用省略号显示 display:-webkit-box; //将对象作为弹性伸缩盒子模型显示。 -webkit-box-orient:vertical; //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式） -webkit-line-clamp:2; //这个属性不是css的规范属性，需要组合上面两个属性，表示显示的行数。","categories":[],"tags":[]},{"title":"2017-10-旧博客归档整理","slug":"2017-10-旧博客归档整理","date":"2018-07-16T06:44:12.457Z","updated":"2018-07-16T07:13:24.379Z","comments":true,"path":"2018/07/16/2017-10-旧博客归档整理/","link":"","permalink":"http://yoursite.com/2018/07/16/2017-10-旧博客归档整理/","excerpt":"","text":"img和background-image到底该选谁? 是否占位 是否可操作 加载顺序不同 Yahoo前端优化建议服务器，内容，CSS，JS，Cookie，图片，移动应用 服务器1.1 使用内容分发网络 用户与你网站服务器的接近程度会影响响应时间的长短。 把你的网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。1.2 为文件头指定 Expires 或 Cache-Control对于静态内容：设置文件头过期时间Expires的值为“Never expire”（永不过期）;对于动态内容：使用恰当的Cache-Control文件头来帮助浏览器有条件的请求。1.3 配置ETagEntity tags（ETags） CSS2.1 把样式表置于顶部2.2 避免使用 CSS 表达式2.3 使用外部的CSS2.4 精简代码2.5 避免使用滤镜 JS3.1 把脚本置于页面底部3.2 使用外部 JavaScript 和 CSS3.3 削减 JavaScript 和 CSS 剔除重复脚本3.4 减少DOM访问3.5 开发智能事件处理程序 COOKIE4.1 减少cookie体积 图片5.1 优化图片(优化图像和CSS Spirite)5.2 favicon.ico要小且能够缓存 mobile6.1 保持单个内容小于25K","categories":[],"tags":[]},{"title":"keep-alive 生命周期","slug":"16-06这一分钟即将过去","date":"2018-07-13T08:06:33.000Z","updated":"2018-07-20T08:56:40.189Z","comments":true,"path":"2018/07/13/16-06这一分钟即将过去/","link":"","permalink":"http://yoursite.com/2018/07/13/16-06这一分钟即将过去/","excerpt":"","text":"https://segmentfault.com/a/1190000008010666","categories":[],"tags":[]}]}